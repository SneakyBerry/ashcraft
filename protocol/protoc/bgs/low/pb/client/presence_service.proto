syntax = "proto2";

import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/presence_types.proto";
import "bgs/low/pb/client/rpc_types.proto";
package bgs.protocol.presence.v1;

option optimize_for = SPEED;
option cc_generic_services = false;

message SubscribeRequest {
  optional .bgs.protocol.EntityId agent_id = 1 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
  required .bgs.protocol.EntityId entity_id = 2;
  required uint64 object_id = 3;
  repeated fixed32 program = 4 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 0
        max: 100
      }
    }
  }];
  repeated .bgs.protocol.presence.v1.FieldKey key = 6 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 0
        max: 500
      }
    }
  }];
}

message UnsubscribeRequest {
  optional .bgs.protocol.EntityId agent_id = 1 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
  required .bgs.protocol.EntityId entity_id = 2;
  optional uint64 object_id = 3;
}

message UpdateRequest {
  required .bgs.protocol.EntityId entity_id = 1;
  repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  optional bool no_create = 3;
  optional .bgs.protocol.EntityId agent_id = 4 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
}

message QueryRequest {
  required .bgs.protocol.EntityId entity_id = 1;
  repeated .bgs.protocol.presence.v1.FieldKey key = 2 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 0
        max: 100
      }
    }
  }];
  optional .bgs.protocol.EntityId agent_id = 3 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
}

message QueryResponse {
  repeated .bgs.protocol.presence.v1.Field field = 2;
}

message BatchSubscribeRequest {
  optional .bgs.protocol.EntityId agent_id = 1 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
  repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 1
        max: 250
      }
    }
  }];
  repeated fixed32 program = 3 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 0
        max: 100
      }
    }
  }];
  repeated .bgs.protocol.presence.v1.FieldKey key = 4 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 0
        max: 500
      }
    }
  }];
  optional uint64 object_id = 5;
}

message SubscribeResult {
  optional .bgs.protocol.EntityId entity_id = 1;
  optional uint32 result = 2;
}

message BatchSubscribeResponse {
  repeated .bgs.protocol.presence.v1.SubscribeResult subscribe_failed = 1;
}

message BatchUnsubscribeRequest {
  optional .bgs.protocol.EntityId agent_id = 1 [(.bgs.protocol.field_options) = {
    client_instance_key: true
  }];
  repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
    repeated {
      size {
        min: 1
        max: 250
      }
    }
  }];
  optional uint64 object_id = 3;
}

service PresenceService {
  option (.bgs.protocol.service_options) = {
    descriptor_name: "bnet.protocol.presence.PresenceService"
    shard_name: "presence_aggregator"
    resolve_client_instance: true
  };
  option (.bgs.protocol.sdk_service_options) = {
    outbound: true
  };
  rpc Subscribe(.bgs.protocol.presence.v1.SubscribeRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 1
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
  rpc Unsubscribe(.bgs.protocol.presence.v1.UnsubscribeRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 2
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
  rpc Update(.bgs.protocol.presence.v1.UpdateRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 3
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
  rpc Query(.bgs.protocol.presence.v1.QueryRequest) returns (.bgs.protocol.presence.v1.QueryResponse) {
    option (.bgs.protocol.method_options) = {
      id: 4
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
  rpc BatchSubscribe(.bgs.protocol.presence.v1.BatchSubscribeRequest) returns (.bgs.protocol.presence.v1.BatchSubscribeResponse) {
    option (.bgs.protocol.method_options) = {
      id: 8
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
  rpc BatchUnsubscribe(.bgs.protocol.presence.v1.BatchUnsubscribeRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 9
      client_identity_routing: CLIENT_IDENTITY_ROUTING_INSTANCE_ID
    };
  }
}


